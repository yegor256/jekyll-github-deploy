#!/usr/bin/env ruby
#
# Copyright (c) 2014-2019 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

STDOUT.sync = true

require 'trollop'
opts = Trollop.options do
  banner <<-EOS
jgd is an automated deployer of Jekyll site to Github Pages

Usage: jgd [options]
  EOS
  opt :url, 'Github URL', type: String, default: ''
  opt :branch, 'Destination branch', type: String, default: 'gh-pages'
  opt :branch_from, 'Source branch', type: String, default: 'master'
  opt :config, 'Deploy Config File', type: String, default: '_config-deploy.yml'
  opt :bundle, 'Use bundle'
  opt :drafts, 'Generate drafts'
end

branch = opts[:branch]
branch_from = opts[:branch_from]
config = File.expand_path(opts[:config])
fail 'branch can\'t be empty' if branch.empty?
fail 'branch-from can\'t be empty' if branch_from.empty?
fail 'config can\'t be empty' if config.empty?
url = opts[:url]
url = `git config --get remote.origin.url`.strip if url.empty?
bundle = opts[:bundle] ? '"bundle exec"' : '""'
drafts = opts[:drafts] ? '"--drafts"' : '""'

spec = Gem::Specification.find_by_name('jgd')
root = spec.gem_dir
script = File.join(root, 'bash/deploy.sh')

fail 'deployment failed, see log above' \
  unless system("#{script} #{url} #{branch} #{branch_from} #{config} #{bundle} #{drafts}")
